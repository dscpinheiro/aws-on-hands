Description: Task definition based on https://github.com/aws-samples/ecs-refarch-cloudformation

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id  
  Cluster:
    Description: ECS Cluster ID that this service should run on
    Type: String
  ListenerArn:
    Description: The Application Load Balancer listener to register with
    Type: String
  ImageUrl:
    Type: String
    Description: Url for the image this task definition will use

Resources:
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365 

  MyTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: products-api
      ContainerDefinitions:
        - Name: products-api
          Essential: true
          Image: !Ref ImageUrl
          Memory: 128
          Environment:
            - Name: SOME_ENV_VAR
              Value: foo123
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region

  MyService:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: 1
      TaskDefinition: !Ref MyTaskDef
      LoadBalancers:
        - ContainerName: products-api
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher: 
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /hc
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ListenerArn
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: 
            - /api/products*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ServiceRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "ecs.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies: 
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "elasticloadbalancing:DeregisterTargets",
                  "elasticloadbalancing:DescribeTargetGroups",
                  "elasticloadbalancing:DescribeTargetHealth",
                  "elasticloadbalancing:RegisterTargets"
                ],
                "Resource": "*"
              }]
            }
